.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/development/" }
    Development
  &nbsp;>&nbsp;
  %a{ :href => "/core/" }
    Core
  %hr

%h1
  Developing BDSM Core
%p
  For BDSM core development, it's best to create a BDSM installation
  locally for testing your changes. That makes it a snap to use the workflow defined below.

%h2
  Prerequisites
%p
  The first prerequisite is having
  %a{:href => "http://git-scm.com/"}
    Git
  installed. (BDSM assumes you're using git 1.7, or later).
%p
  If you have't already installed BDSM locally, follow the
  %a{:href => "/bdsm/install/"}
    installation documentation.

%h2
  Core development
%p
  Get started on developing BDSM core is pretty straightforward.
%p
  First, set your extensions development path in your *development user's* ~/.bdsmrc.
%p
  On my system, I keep all my code related to the BDSM
  project in ~/projects/bdsm/.
  So my ~/.bdsmrc contains the following line:

%pre.code
  :preserve
    export core_development_path="$HOME/projects/bdsm/core"

%p
  Next, clone the repositories into the development paths you've defined:
%pre.code
  :preserve
    user$ mkdir -p ~/projects/bdsm
    user$ git clone git://github.com/sm/sm ~/projects/bdsm/core

%p
  That's it - you are now ready to start working on BDSM core!
%p
  There are four parts to the BDSM core framework:
  %ol
    %li Installer (./install)
    %li Bootstrap script (bin/bdsm)
    %li Core extensions (extensions/)
    %li Modules (modules/)

%h2
  Installer / Bootstrap Script
%p
  Please be *sure* to talk to me if you are modifying either of these, as I may be able
  to save you a lot of pain [not the good kind] :)
%p
  To edit BDSM core in your preferred $EDITOR, run the command below.
%pre.code
  :preserve
    user$ bdsm core edit
%p
  Note that if you haven't already set an EDITOR variable
  in your shell, 'vi' launches in your terminal. (usually you'll do that in your ~/.bash_profile or ~/.zshenv).

%h2
  Core Extensions
%p
  To edit BDSM's core extensions in your $EDITOR, run this command:
%pre.code
  :preserve
    user$ bdsm edit {{core,ext, or mod}}

%h2
  Modules
%p
  To edit BDSM's core modules in your $EDITOR, use this command:
%pre.code
  :preserve
    user$ bdsm module edit X
%p
  You can instantly list all the core modules of BDSM, with:
%pre.code
  :preserve
    user$ bdsm modules list
%p
  Here's how to list all the DSL functions supported by any given module.
%pre.code
  :preserve
    user$ bdsm modules dsl {{module name}}

%p
  To create a new module, just do this:
%pre.code
  :preserve
    user$ bdsm module create newmodule
    user$ bdsm module edit newmodule

%h2 Submitting core changes
%p
  Once you're happy with your changes, add your new extension to a git branch, then
  send a pull request to BDSM's maintainers. Here's the whole routine, twitch by twitch.

%p
  First,
  %a{:href => "https://github.com/sm/sm#fork_box"}
    fork the repository on GitHub
  into your account.

%p
  Next, add your forked GitHub repository as a remote.
%pre.code
  :preserve
    user$ cd $(bdsm core src)
    user$ git remote add github git@github.com:{{your GitHub username}}/bdsm.git

%p
  Now, add your awesome code to a spanking new topic branch.
%pre.code
  :preserve
    user$ git checkout -b featureX # Or perhaps bugfixX
    user$ git add {{changed files}}
    user$ git commit -m "Added feature X." # Or "Bugfix: Fixed X... {{explain}}"
%p
  Next, push your topic branch, containing all that moist and oh-so-delicious fresh code, right back up to your forked GitHub repository.
%pre.code
  :preserve
    user$ git push github featureX # OR bugfixX

%p
  And, as the final climactic step, browse to your GitHub account's bdsm repo page, and click that big, slick, shiny Pull Request button, to signal the
  %a{:href => "https://github.com/sm/sm.git"}
    main repository
  that there's more good stuff at hand. Ahhhhh. Satisfaction.

